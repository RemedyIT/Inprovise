# Scheme template for Inprovise
#
# Author::    Martin Corino
# License::   Distributes under the same license as Ruby

# include 'another_scheme.rb'

# script 'script' do
#
#   description 'description'
#
#   configuration <data> [{ }]
#
#   action('action1') {  }
#   action('action2')  { }
#
#   apply do
#
#   end
#
#   revert do
#
#   end
#
#   validate do
#
#   end
# end
#
#
# All blocks (action,apply,revert,validate,file props,file block) execute in a special context providing the
# following methods:
#
# node                                              current node
#
# config                                            current (consolidated, transient) config
#
# as 'user' do ... end                              creates a nested execution context where all remote commands
#                                                   will be executed for the given user
#
# in_dir 'path' do ... end                          creates a nested execution context where all remote commands
#                                                   will be executed using the given path as working directory
#
# trigger 'script:action'[,*args]                   runs specified action code blocks
#
# run 'command'[, {}]                               execute command on current node over SSH connection
#                                                   options:
#                                                     :once => true
#                                                       run command only once (from whatever script executes it first)
#                                                     :log => true
#                                                       force logging SSH commands and output
#
# run_local 'command'                               execute command locally
#
# log 'msg', color=nil                              log a message; color is symbol like :red, :blue, :yellow ...
#
# sudo 'command'[, {}]                              execute command on current node over SSH connection using 'sudo'
#                                                   options: see 'run'
#
# env 'var'                                         returns value of environment variable on current node
#
# upload '/from/local/path', '/to/remote/path'      up-/download files using SFTP connection for current node
# download '/from/remote/path', '/to/local/path'
#
# local('/local/path')                              creates a local/remote file object providing the following
# remote('/remote/path')                            methods:
#                         .hash                             returns an SHA1 hash as hex string
#                         .exists?
#                         .file?
#                         .directory?
#                         .content
#                         .matches?(other_file)
#                         .copy_to(dest_file)
#                         .copy_from(src_file)
#                         .delete!
#                         .permissions
#                         .set_permissions
#                         .user
#                         .group
#                         .set_owner('user'[,'group'])
#                         .is_local?
#
# mkdir '/remote/path'                              create directory(-ies) on current node
#
# binary_exists?('bin-name')
#
# template('/local/file')                           creates a template object for the specified (ERB) template file
#                                                   providing 2 rendering options
#                         .render(locals ={})                 returns rendered result string
#                         .render_to_tempfile(locals = {})    returns path of local tempfile containing rendered result
#                         .render_to(fname[, mktmp = true], locals={})
#                                                             return remote file object referencing (temp)
#                                                             file containing rendered result
#                         .render_to(fname[, mktmp = true], locals={}) { |fremote| ... }
#                                                             yields block with remote file object referencing (temp)
#                                                             file containing rendered result
#                                                             deletes the remote file after block finishes if it still
#                                                             exists
#

